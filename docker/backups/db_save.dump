--
-- PostgreSQL database dump
--

-- Dumped from database version 14.2 (Debian 14.2-1.pgdg110+1)
-- Dumped by pg_dump version 14.7 (Ubuntu 14.7-0ubuntu0.22.04.1)

-- Started on 2023-03-25 18:47:27 UTC

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 10 (class 2615 OID 16453)
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- TOC entry 11 (class 2615 OID 16387)
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- TOC entry 5 (class 3079 OID 16573)
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA public;


--
-- TOC entry 3836 (class 0 OID 0)
-- Dependencies: 5
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'GraphQL support';


--
-- TOC entry 16 (class 2615 OID 16561)
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO postgres;

--
-- TOC entry 9 (class 2615 OID 16959)
-- Name: iris; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA iris;


ALTER SCHEMA iris OWNER TO supabase_admin;

--
-- TOC entry 15 (class 2615 OID 16384)
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO postgres;

--
-- TOC entry 14 (class 2615 OID 16501)
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- TOC entry 3 (class 3079 OID 16399)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- TOC entry 3840 (class 0 OID 0)
-- Dependencies: 3
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- TOC entry 4 (class 3079 OID 16436)
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- TOC entry 3841 (class 0 OID 0)
-- Dependencies: 4
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- TOC entry 2 (class 3079 OID 16388)
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- TOC entry 3842 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- TOC entry 288 (class 1255 OID 16499)
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select nullif(current_setting('request.jwt.claim.email', true), '')::text;
$$;


ALTER FUNCTION auth.email() OWNER TO postgres;

--
-- TOC entry 289 (class 1255 OID 16498)
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select nullif(current_setting('request.jwt.claim.role', true), '')::text;
$$;


ALTER FUNCTION auth.role() OWNER TO postgres;

--
-- TOC entry 290 (class 1255 OID 16497)
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select nullif(current_setting('request.jwt.claim.sub', true), '')::uuid;
$$;


ALTER FUNCTION auth.uid() OWNER TO postgres;

--
-- TOC entry 329 (class 1255 OID 16558)
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  schema_is_cron bool;
BEGIN
  schema_is_cron = (
    SELECT n.nspname = 'cron'
    FROM pg_event_trigger_ddl_commands() AS ev
    LEFT JOIN pg_catalog.pg_namespace AS n
      ON ev.objid = n.oid
  );

  IF schema_is_cron
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option; 

  END IF;

END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- TOC entry 3861 (class 0 OID 0)
-- Dependencies: 329
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- TOC entry 326 (class 1255 OID 16569)
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant all on function graphql.resolve to postgres, anon, authenticated, service_role;

        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        grant select on graphql.field, graphql.type, graphql.enum_value to postgres, anon, authenticated, service_role;
        grant execute on function graphql.resolve to postgres, anon, authenticated, service_role;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO postgres;

--
-- TOC entry 3863 (class 0 OID 0)
-- Dependencies: 326
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- TOC entry 312 (class 1255 OID 16556)
-- Name: notify_api_restart(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.notify_api_restart() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NOTIFY pgrst, 'reload schema';
END;
$$;


ALTER FUNCTION extensions.notify_api_restart() OWNER TO postgres;

--
-- TOC entry 3866 (class 0 OID 0)
-- Dependencies: 312
-- Name: FUNCTION notify_api_restart(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.notify_api_restart() IS 'Sends a notification to the API to restart. If your database schema has changed, this is required so that Supabase can rebuild the relationships.';


--
-- TOC entry 327 (class 1255 OID 16571)
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO postgres;

--
-- TOC entry 3888 (class 0 OID 0)
-- Dependencies: 327
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- TOC entry 417 (class 1255 OID 17149)
-- Name: check_album(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_album() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT *
    FROM iris.album
    WHERE game_id = NEW.game_id
    AND name = NEW.name
  ) THEN
    DELETE FROM iris.album
    WHERE game_id = NEW.game_id
    AND name = NEW.name;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.check_album() OWNER TO postgres;

--
-- TOC entry 431 (class 1255 OID 17147)
-- Name: delete_album_track(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_album_track() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  DELETE FROM iris.track
  WHERE id IN (
    SELECT track_id
    FROM iris.album_track
    WHERE album_id = OLD.id
  )
  AND id NOT IN (
    SELECT track_id
    FROM iris.album_track
    WHERE album_id != OLD.id
  );
  DELETE FROM iris.album_track
  WHERE album_id = OLD.id;
  RETURN OLD;
END;
$$;


ALTER FUNCTION public.delete_album_track() OWNER TO postgres;

--
-- TOC entry 430 (class 1255 OID 17166)
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
begin
  insert into public.profiles (id, email, username)
  values (new.id, new.email, new.raw_user_meta_data::json->>'username');
  return new;
end;
$$;


ALTER FUNCTION public.handle_new_user() OWNER TO postgres;

--
-- TOC entry 435 (class 1255 OID 16545)
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return split_part(_filename, '.', 2);
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 437 (class 1255 OID 16544)
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 286 (class 1255 OID 16543)
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 287 (class 1255 OID 16546)
-- Name: search(text, text, integer, integer, integer); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql
    AS $$
DECLARE
_bucketId text;
BEGIN
    -- will be replaced by migrations when server starts
    -- saving space for cloud-init
END
$$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer) OWNER TO supabase_storage_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 224 (class 1259 OID 16484)
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- TOC entry 3915 (class 0 OID 0)
-- Dependencies: 224
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- TOC entry 223 (class 1259 OID 16477)
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- TOC entry 3917 (class 0 OID 0)
-- Dependencies: 223
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- TOC entry 222 (class 1259 OID 16466)
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- TOC entry 3919 (class 0 OID 0)
-- Dependencies: 222
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- TOC entry 221 (class 1259 OID 16465)
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- TOC entry 3921 (class 0 OID 0)
-- Dependencies: 221
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- TOC entry 225 (class 1259 OID 16492)
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- TOC entry 3923 (class 0 OID 0)
-- Dependencies: 225
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- TOC entry 220 (class 1259 OID 16454)
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- TOC entry 3925 (class 0 OID 0)
-- Dependencies: 220
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- TOC entry 254 (class 1259 OID 17049)
-- Name: album; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.album (
    id integer NOT NULL,
    game_id integer,
    name text,
    slug text,
    is_ready boolean,
    is_main boolean
);


ALTER TABLE iris.album OWNER TO postgres;

--
-- TOC entry 253 (class 1259 OID 17048)
-- Name: album_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.album_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.album_id_seq OWNER TO postgres;

--
-- TOC entry 3927 (class 0 OID 0)
-- Dependencies: 253
-- Name: album_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.album_id_seq OWNED BY iris.album.id;


--
-- TOC entry 255 (class 1259 OID 17062)
-- Name: album_track; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.album_track (
    album_id integer NOT NULL,
    track_id integer NOT NULL
);


ALTER TABLE iris.album_track OWNER TO postgres;

--
-- TOC entry 250 (class 1259 OID 17021)
-- Name: alternative_name; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.alternative_name (
    id integer NOT NULL,
    game_id integer,
    name text,
    comment text
);


ALTER TABLE iris.alternative_name OWNER TO postgres;

--
-- TOC entry 249 (class 1259 OID 17020)
-- Name: alternative_name_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.alternative_name_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.alternative_name_id_seq OWNER TO postgres;

--
-- TOC entry 3928 (class 0 OID 0)
-- Dependencies: 249
-- Name: alternative_name_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.alternative_name_id_seq OWNED BY iris.alternative_name.id;


--
-- TOC entry 245 (class 1259 OID 16970)
-- Name: category; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.category (
    id integer NOT NULL,
    name text
);


ALTER TABLE iris.category OWNER TO postgres;

--
-- TOC entry 244 (class 1259 OID 16969)
-- Name: category_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.category_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.category_id_seq OWNER TO postgres;

--
-- TOC entry 3929 (class 0 OID 0)
-- Dependencies: 244
-- Name: category_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.category_id_seq OWNED BY iris.category.id;


--
-- TOC entry 243 (class 1259 OID 16961)
-- Name: collection; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.collection (
    id integer NOT NULL,
    name text,
    slug text
);


ALTER TABLE iris.collection OWNER TO postgres;

--
-- TOC entry 242 (class 1259 OID 16960)
-- Name: collection_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.collection_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.collection_id_seq OWNER TO postgres;

--
-- TOC entry 3930 (class 0 OID 0)
-- Dependencies: 242
-- Name: collection_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.collection_id_seq OWNED BY iris.collection.id;


--
-- TOC entry 261 (class 1259 OID 17102)
-- Name: company; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.company (
    id integer NOT NULL,
    name text,
    slug text,
    description text,
    logo_id text
);


ALTER TABLE iris.company OWNER TO postgres;

--
-- TOC entry 260 (class 1259 OID 17101)
-- Name: company_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.company_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.company_id_seq OWNER TO postgres;

--
-- TOC entry 3931 (class 0 OID 0)
-- Dependencies: 260
-- Name: company_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.company_id_seq OWNED BY iris.company.id;


--
-- TOC entry 248 (class 1259 OID 17003)
-- Name: extra_content; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.extra_content (
    game_id integer NOT NULL,
    extra_id integer NOT NULL,
    type text
);


ALTER TABLE iris.extra_content OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 16979)
-- Name: game; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.game (
    id integer NOT NULL,
    name text,
    slug text,
    complete boolean,
    parent_game integer,
    category integer,
    collection_id integer,
    first_release_date date,
    rating double precision,
    popularity integer,
    summary text
);


ALTER TABLE iris.game OWNER TO postgres;

--
-- TOC entry 246 (class 1259 OID 16978)
-- Name: game_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.game_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.game_id_seq OWNER TO postgres;

--
-- TOC entry 3932 (class 0 OID 0)
-- Dependencies: 246
-- Name: game_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.game_id_seq OWNED BY iris.game.id;


--
-- TOC entry 259 (class 1259 OID 17091)
-- Name: genre; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.genre (
    game_id integer,
    name text,
    slug text
);


ALTER TABLE iris.genre OWNER TO postgres;

--
-- TOC entry 262 (class 1259 OID 17110)
-- Name: involved_companies; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.involved_companies (
    game_id integer,
    company_id integer,
    developer boolean,
    porting boolean,
    publisher boolean,
    supporting boolean
);


ALTER TABLE iris.involved_companies OWNER TO postgres;

--
-- TOC entry 264 (class 1259 OID 17124)
-- Name: keyword; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.keyword (
    id integer NOT NULL,
    game_id integer,
    name text,
    slug text
);


ALTER TABLE iris.keyword OWNER TO postgres;

--
-- TOC entry 263 (class 1259 OID 17123)
-- Name: keyword_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.keyword_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.keyword_id_seq OWNER TO postgres;

--
-- TOC entry 3933 (class 0 OID 0)
-- Dependencies: 263
-- Name: keyword_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.keyword_id_seq OWNED BY iris.keyword.id;


--
-- TOC entry 258 (class 1259 OID 17081)
-- Name: media; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.media (
    image_id text,
    game_id integer,
    type text,
    height integer,
    width integer
);


ALTER TABLE iris.media OWNER TO postgres;

--
-- TOC entry 257 (class 1259 OID 17068)
-- Name: playlist; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.playlist (
    id integer NOT NULL,
    name text,
    track_id integer,
    cover text,
    created_at date,
    updated_at date,
    created_by integer,
    public boolean
);


ALTER TABLE iris.playlist OWNER TO postgres;

--
-- TOC entry 256 (class 1259 OID 17067)
-- Name: playlist_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.playlist_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.playlist_id_seq OWNER TO postgres;

--
-- TOC entry 3934 (class 0 OID 0)
-- Dependencies: 256
-- Name: playlist_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.playlist_id_seq OWNED BY iris.playlist.id;


--
-- TOC entry 265 (class 1259 OID 17137)
-- Name: theme; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.theme (
    game_id integer,
    name text,
    slug text
);


ALTER TABLE iris.theme OWNER TO postgres;

--
-- TOC entry 252 (class 1259 OID 17035)
-- Name: track; Type: TABLE; Schema: iris; Owner: postgres
--

CREATE TABLE iris.track (
    id integer NOT NULL,
    game_id integer,
    title text,
    slug text,
    file uuid,
    view_count integer,
    like_count integer,
    length integer
);


ALTER TABLE iris.track OWNER TO postgres;

--
-- TOC entry 251 (class 1259 OID 17034)
-- Name: track_id_seq; Type: SEQUENCE; Schema: iris; Owner: postgres
--

CREATE SEQUENCE iris.track_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE iris.track_id_seq OWNER TO postgres;

--
-- TOC entry 3935 (class 0 OID 0)
-- Dependencies: 251
-- Name: track_id_seq; Type: SEQUENCE OWNED BY; Schema: iris; Owner: postgres
--

ALTER SEQUENCE iris.track_id_seq OWNED BY iris.track.id;


--
-- TOC entry 266 (class 1259 OID 17151)
-- Name: profiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.profiles (
    id uuid NOT NULL,
    email text,
    username text
);


ALTER TABLE public.profiles OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 16505)
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- TOC entry 228 (class 1259 OID 16547)
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- TOC entry 227 (class 1259 OID 16520)
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- TOC entry 3526 (class 2604 OID 17168)
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- TOC entry 3547 (class 2604 OID 17169)
-- Name: album id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.album ALTER COLUMN id SET DEFAULT nextval('iris.album_id_seq'::regclass);


--
-- TOC entry 3545 (class 2604 OID 17170)
-- Name: alternative_name id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.alternative_name ALTER COLUMN id SET DEFAULT nextval('iris.alternative_name_id_seq'::regclass);


--
-- TOC entry 3543 (class 2604 OID 17171)
-- Name: category id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.category ALTER COLUMN id SET DEFAULT nextval('iris.category_id_seq'::regclass);


--
-- TOC entry 3542 (class 2604 OID 17172)
-- Name: collection id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.collection ALTER COLUMN id SET DEFAULT nextval('iris.collection_id_seq'::regclass);


--
-- TOC entry 3549 (class 2604 OID 17173)
-- Name: company id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.company ALTER COLUMN id SET DEFAULT nextval('iris.company_id_seq'::regclass);


--
-- TOC entry 3544 (class 2604 OID 17174)
-- Name: game id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.game ALTER COLUMN id SET DEFAULT nextval('iris.game_id_seq'::regclass);


--
-- TOC entry 3550 (class 2604 OID 17175)
-- Name: keyword id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.keyword ALTER COLUMN id SET DEFAULT nextval('iris.keyword_id_seq'::regclass);


--
-- TOC entry 3548 (class 2604 OID 17176)
-- Name: playlist id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.playlist ALTER COLUMN id SET DEFAULT nextval('iris.playlist_id_seq'::regclass);


--
-- TOC entry 3546 (class 2604 OID 17177)
-- Name: track id; Type: DEFAULT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.track ALTER COLUMN id SET DEFAULT nextval('iris.track_id_seq'::regclass);


--
-- TOC entry 3798 (class 0 OID 16484)
-- Dependencies: 224
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at) FROM stdin;
\.


--
-- TOC entry 3797 (class 0 OID 16477)
-- Dependencies: 223
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 3796 (class 0 OID 16466)
-- Dependencies: 222
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 3799 (class 0 OID 16492)
-- Dependencies: 225
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
\.


--
-- TOC entry 3794 (class 0 OID 16454)
-- Dependencies: 220
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 3815 (class 0 OID 17049)
-- Dependencies: 254
-- Data for Name: album; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.album (id, game_id, name, slug, is_ready, is_main) FROM stdin;
\.


--
-- TOC entry 3816 (class 0 OID 17062)
-- Dependencies: 255
-- Data for Name: album_track; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.album_track (album_id, track_id) FROM stdin;
\.


--
-- TOC entry 3811 (class 0 OID 17021)
-- Dependencies: 250
-- Data for Name: alternative_name; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.alternative_name (id, game_id, name, comment) FROM stdin;
\.


--
-- TOC entry 3806 (class 0 OID 16970)
-- Dependencies: 245
-- Data for Name: category; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.category (id, name) FROM stdin;
0	main_game
1	dlc_addon
2	expansion
3	bundle
4	standalone_expansion
5	mod
6	episode
7	season
8	remake
9	remaster
10	expanded_game
11	port
12	fork
\.


--
-- TOC entry 3804 (class 0 OID 16961)
-- Dependencies: 243
-- Data for Name: collection; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.collection (id, name, slug) FROM stdin;
18	Assassin's Creed	assassin-s-creed
\.


--
-- TOC entry 3822 (class 0 OID 17102)
-- Dependencies: 261
-- Data for Name: company; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.company (id, name, slug, description, logo_id) FROM stdin;
38	Ubisoft Montreal	ubisoft-montreal	Ubisoft Montréal is Ubisoft's largest in-house development studio, as well as the largest development studio worldwide with more than 4,000 employees. Founded in Montréal, Québec, the studio started with only 50 employees. 25 of these came from Ubisoft's headquarters in France, while the rest were new recruits. While the company originally focused their work on licensed family-friendly titles, the team achieved breakthrough success through the release of two titles: Prince of Persia: The Sands of Time and Tom Clancy's Splinter Cell.	cl4mj
398	Ubisoft Shanghai	ubisoft-shanghai	Ubisoft Shanghai was founded in 1996 in Shanghai, and has become one of China's largest development studios. The studio has worked as the support team for many of Ubisoft's projects, such as the Far Cry franchise, working on wildlife animation and artificial intelligence.	cl4ai
697	Ubisoft Bucharest	ubisoft-bucharest	Ubisoft Bucharest has been an important pillar for the local gaming industry since 1992, being the first Ubisoft production studio outside France. It has a strong history of contributing to iconic AAA franchises such as Assassin’s Creed, Tom Clancy's Ghost Recon, Watch Dogs and Just Dance, and has helped develop a total of over 60 games.\nToday, the studio is the 2nd largest Ubisoft studio worldwide and continues to tackle the biggest challenges in gaming and technology, contributing to the creation of new and amazing games.	cl4lt
822	Ubisoft Singapore	ubisoft-singapore	Ubisoft Singapore was formed in 2008 as Ubisoft's first in-house studio in South-East Asia, located on the Fusionopolis complex in Singapore. Having served as a support studio, working on games such as Prince of Persia: The Forgotten Sands and Assassin's Creed II, the company worked on the naval combat of Assassin's Creed III before significantly expanding it with Assassin's Creed IV: Black Flag and Assassin's Creed Rogue. The company is also responsible for making the AAA multiplayer online shooting game Tom Clancy's Ghost Recon Phantoms, released in 2014 and closed in December 2016. After the closure of Ghost Recon Phantoms, the studio's creative director, Justin Farren, came to Ubisoft's E3 2017 press conference to announce their new IP named Skull & Bones, the development of which it would lead. The game is scheduled to be released sometime after April 2022. Ubisoft Singapore has 500 employees.	cl4ah
2921	Ubisoft Kyiv	ubisoft-kyiv	Ubisoft Kyiv was founded in 2008 in Kyiv, Ukraine, originally as Ubisoft Kiev. The studio's focus is to port Ubisoft games to personal computers (PCs), and the studio has also worked on titles such as Tom Clancy's Ghost Recon Future Soldier and Watch Dogs 2. Ubisoft Kyiv partnered with Massive Entertainment on Uplay and frequently worked with RedLynx on Trials games. In 2016, the studio launched a quality control department for PC ports. Recently, Ubisoft Kyiv has worked closely with Ubisoft Quebec on Assassin's Creed Odyssey's PC version, and with RedLynx on Trials Rising. In December 2019, Ubisoft Kiev was rebranded as Ubisoft Kyiv to adopt the Ukrainian spelling of the city's name.	cl4m2
3634	Sperasoft	sperasoft	Sperasoft is a leading games development company with development centers in USA, Poland and Russia.	cl22v
3928	Ubisoft Chengdu	ubisoft-chengdu	Ubisoft Chengdu was founded in 2008 in Chengdu, as Ubisoft's second studio in China. The studio also served as a support studio, working on games such as Scott Pilgrim vs. the World: The Game, and provided Chinese localisation services for games like Might & Magic: Duel of Champions. Ubisoft Chengdu led the development of Monkey King Escape, a mobile title, and casual games Scrabble (2013), Uno (2017) and Wheel of Fortune. The studio has over 420 employees.	cl4m1
15260	Ubisoft Philippines	ubisoft-philippines	Ubisoft Philippines is the first major game studio in the Philippines. It is located on the campus of De La Salle University in Santa Rosa, Laguna. The studio develops new AAA games alongside Ubisoft Singapore and has 150 employees.	cl4mb
15790	Ubisoft Québec	ubisoft-quebec--1	Ubisoft Québec studio stands out among the video game industry leaders. Through the years, the studio has managed to achieve cutting-edge expertise, positioning itself in the development of major AAA games. It is especially involved on the Assassin's Creed franchise since 2010 and also served as the lead developer for Assassin's Creed Odyssey and Immortals Fenyx Rising.	cl4mf
\.


--
-- TOC entry 3809 (class 0 OID 17003)
-- Dependencies: 248
-- Data for Name: extra_content; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.extra_content (game_id, extra_id, type) FROM stdin;
\.


--
-- TOC entry 3808 (class 0 OID 16979)
-- Dependencies: 247
-- Data for Name: game; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.game (id, name, slug, complete, parent_game, category, collection_id, first_release_date, rating, popularity, summary) FROM stdin;
241431	Assassin's Creed Odyssey: The Lost Tales of Greece	\N	f	\N	\N	\N	\N	\N	\N	\N
241432	Assassin's Creed Odyssey: Prince of Persia	\N	f	\N	\N	\N	\N	\N	\N	\N
112732	Assassin's Creed Odyssey: Legacy of the First Blade	\N	f	\N	\N	\N	\N	\N	\N	\N
113098	Assassin's Creed Odyssey: The Fate of Atlantis	\N	f	\N	\N	\N	\N	\N	\N	\N
1877	Cyberpunk 2077	\N	f	\N	\N	\N	\N	\N	\N	\N
19564	Death Stranding	\N	f	\N	\N	\N	\N	\N	\N	\N
26574	Force of Nature	\N	f	\N	\N	\N	\N	\N	\N	\N
34155	The Black Death	\N	f	\N	\N	\N	\N	\N	\N	\N
81249	The Elder Scrolls VI	\N	f	\N	\N	\N	\N	\N	\N	\N
96217	Eternity: The Last Unicorn	\N	f	\N	\N	\N	\N	\N	\N	\N
103303	The Elder Scrolls: Blades	\N	f	\N	\N	\N	\N	\N	\N	\N
105049	Remnant: From the Ashes	\N	f	\N	\N	\N	\N	\N	\N	\N
106987	Torchlight III	\N	f	\N	\N	\N	\N	\N	\N	\N
115653	Pokémon Shield	\N	f	\N	\N	\N	\N	\N	\N	\N
133962	Discovery Tour: Ancient Greece	\N	f	\N	\N	\N	\N	\N	\N	\N
103054	Assassin's Creed Odyssey	assassins-creed-odyssey	t	\N	0	18	2018-10-05	82.5395735206615	\N	Write your own epic odyssey and become a legendary Spartan hero in Assassin's Creed Odyssey, an inspiring adventure where you must forge your destiny and define your own path in a world on the brink of tearing itself apart. Influence how history unfolds as you experience a rich and ever-changing world shaped by your decisions.
\.


--
-- TOC entry 3820 (class 0 OID 17091)
-- Dependencies: 259
-- Data for Name: genre; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.genre (game_id, name, slug) FROM stdin;
103054	Role-playing (RPG)	role-playing-rpg
103054	Adventure	adventure
\.


--
-- TOC entry 3823 (class 0 OID 17110)
-- Dependencies: 262
-- Data for Name: involved_companies; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.involved_companies (game_id, company_id, developer, porting, publisher, supporting) FROM stdin;
103054	822	f	f	f	t
103054	15790	t	f	f	f
103054	38	f	f	f	t
103054	697	f	f	f	t
103054	398	f	f	f	t
103054	3928	f	f	f	t
103054	2921	f	f	f	t
103054	15260	f	f	f	t
103054	3634	f	f	f	t
\.


--
-- TOC entry 3825 (class 0 OID 17124)
-- Dependencies: 264
-- Data for Name: keyword; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.keyword (id, game_id, name, slug) FROM stdin;
1	103054	assassin	assassin
2	103054	ancient greece	ancient-greece
3	103054	mythology	mythology
4	103054	spartan	spartan
5	103054	e3 2018	e3-2018
6	103054	greek	greek
7	103054	sparta,	sparta
8	103054	leonidas	leonidas
9	103054	peloponnesian war	peloponnesian-war
10	103054	mythological	mythological
11	103054	ancient athens	ancient-athens
12	103054	athens	athens
\.


--
-- TOC entry 3819 (class 0 OID 17081)
-- Dependencies: 258
-- Data for Name: media; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.media (image_id, game_id, type, height, width) FROM stdin;
e9irhuudfu35eddwhxps	103054	artworks	6000	4637
ph0f34mny5dc3h2pdidz	103054	artworks	6000	4637
gk0jam9nmeb5p7ifvvyo	103054	artworks	10000	8800
cvggsmtdobh8pkl8ajhv	103054	artworks	1230	900
c6i5jb9ucyec1fak1kni	103054	artworks	600	1610
gaynboyx7mlsgoudkh8a	103054	artworks	600	1305
ar4hx	103054	artworks	8000	6222
ar4hy	103054	artworks	5444	10591
ar4hz	103054	artworks	7938	12444
co2nul	103054	cover	2000	1500
bxpsd9akgwqbcdusdjwf	103054	screenshots	2160	3840
gfpbnk9unsxba7swao0v	103054	screenshots	2160	3840
ofewauwsnqfcvar9fcho	103054	screenshots	2160	3840
tri64r5ppxjjwbc0jny9	103054	screenshots	2160	3840
oy3sblbvvxpaatmhis6n	103054	screenshots	2160	3840
wmrvnumhfxku1hvpq7m6	103054	screenshots	2160	3840
zkk4g8kigrrgfuswdvyl	103054	screenshots	2160	3840
gcfut0wzdwzr2lt7zhog	103054	screenshots	2160	3840
gapzclh3mulnucw0ytti	103054	screenshots	2160	3840
uomt842usvkcn08bygrm	103054	screenshots	2160	3840
wg3k2ccwua6aca2cvx5j	103054	screenshots	2160	3840
uhbwqvqyzd9z28moax4v	103054	screenshots	2160	3840
kacwihapdvs1bnvpdv5g	103054	screenshots	2160	3840
fkkiiyjtcu7os0fpvhe0	103054	screenshots	2160	3840
kpnxx0mtm8iv1041h67t	103054	screenshots	2160	3840
\.


--
-- TOC entry 3818 (class 0 OID 17068)
-- Dependencies: 257
-- Data for Name: playlist; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.playlist (id, name, track_id, cover, created_at, updated_at, created_by, public) FROM stdin;
\.


--
-- TOC entry 3826 (class 0 OID 17137)
-- Dependencies: 265
-- Data for Name: theme; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.theme (game_id, name, slug) FROM stdin;
103054	Action	action
103054	Historical	historical
103054	Stealth	stealth
103054	Open world	open-world
\.


--
-- TOC entry 3813 (class 0 OID 17035)
-- Dependencies: 252
-- Data for Name: track; Type: TABLE DATA; Schema: iris; Owner: postgres
--

COPY iris.track (id, game_id, title, slug, file, view_count, like_count, length) FROM stdin;
\.


--
-- TOC entry 3827 (class 0 OID 17151)
-- Dependencies: 266
-- Data for Name: profiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.profiles (id, email, username) FROM stdin;
\.


--
-- TOC entry 3800 (class 0 OID 16505)
-- Dependencies: 226
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 3802 (class 0 OID 16547)
-- Dependencies: 228
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
\.


--
-- TOC entry 3801 (class 0 OID 16520)
-- Dependencies: 227
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata) FROM stdin;
\.


--
-- TOC entry 3940 (class 0 OID 0)
-- Dependencies: 221
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 1, false);


--
-- TOC entry 3941 (class 0 OID 0)
-- Dependencies: 253
-- Name: album_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.album_id_seq', 3, true);


--
-- TOC entry 3942 (class 0 OID 0)
-- Dependencies: 249
-- Name: alternative_name_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.alternative_name_id_seq', 2, true);


--
-- TOC entry 3943 (class 0 OID 0)
-- Dependencies: 244
-- Name: category_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.category_id_seq', 1, false);


--
-- TOC entry 3944 (class 0 OID 0)
-- Dependencies: 242
-- Name: collection_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.collection_id_seq', 1, false);


--
-- TOC entry 3945 (class 0 OID 0)
-- Dependencies: 260
-- Name: company_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.company_id_seq', 1, false);


--
-- TOC entry 3946 (class 0 OID 0)
-- Dependencies: 246
-- Name: game_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.game_id_seq', 1, false);


--
-- TOC entry 3947 (class 0 OID 0)
-- Dependencies: 263
-- Name: keyword_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.keyword_id_seq', 12, true);


--
-- TOC entry 3948 (class 0 OID 0)
-- Dependencies: 256
-- Name: playlist_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.playlist_id_seq', 1, false);


--
-- TOC entry 3949 (class 0 OID 0)
-- Dependencies: 251
-- Name: track_id_seq; Type: SEQUENCE SET; Schema: iris; Owner: postgres
--

SELECT pg_catalog.setval('iris.track_id_seq', 168, true);


--
-- TOC entry 3565 (class 2606 OID 16490)
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- TOC entry 3563 (class 2606 OID 16483)
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- TOC entry 3560 (class 2606 OID 16473)
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 3568 (class 2606 OID 16496)
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- TOC entry 3552 (class 2606 OID 16462)
-- Name: users users_email_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- TOC entry 3556 (class 2606 OID 16460)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 3609 (class 2606 OID 17056)
-- Name: album album_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.album
    ADD CONSTRAINT album_pkey PRIMARY KEY (id);


--
-- TOC entry 3611 (class 2606 OID 17066)
-- Name: album_track album_track_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.album_track
    ADD CONSTRAINT album_track_pkey PRIMARY KEY (album_id, track_id);


--
-- TOC entry 3605 (class 2606 OID 17028)
-- Name: alternative_name alternative_name_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.alternative_name
    ADD CONSTRAINT alternative_name_pkey PRIMARY KEY (id);


--
-- TOC entry 3599 (class 2606 OID 16977)
-- Name: category category_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.category
    ADD CONSTRAINT category_pkey PRIMARY KEY (id);


--
-- TOC entry 3597 (class 2606 OID 16968)
-- Name: collection collection_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.collection
    ADD CONSTRAINT collection_pkey PRIMARY KEY (id);


--
-- TOC entry 3615 (class 2606 OID 17109)
-- Name: company company_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.company
    ADD CONSTRAINT company_pkey PRIMARY KEY (id);


--
-- TOC entry 3603 (class 2606 OID 17009)
-- Name: extra_content extra_content_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.extra_content
    ADD CONSTRAINT extra_content_pkey PRIMARY KEY (game_id, extra_id);


--
-- TOC entry 3601 (class 2606 OID 16987)
-- Name: game game_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.game
    ADD CONSTRAINT game_pkey PRIMARY KEY (id);


--
-- TOC entry 3617 (class 2606 OID 17131)
-- Name: keyword keyword_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.keyword
    ADD CONSTRAINT keyword_pkey PRIMARY KEY (id);


--
-- TOC entry 3613 (class 2606 OID 17075)
-- Name: playlist playlist_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.playlist
    ADD CONSTRAINT playlist_pkey PRIMARY KEY (id);


--
-- TOC entry 3607 (class 2606 OID 17042)
-- Name: track track_pkey; Type: CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.track
    ADD CONSTRAINT track_pkey PRIMARY KEY (id);


--
-- TOC entry 3619 (class 2606 OID 17157)
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- TOC entry 3571 (class 2606 OID 16513)
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- TOC entry 3577 (class 2606 OID 16554)
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- TOC entry 3579 (class 2606 OID 16552)
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 3575 (class 2606 OID 16530)
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- TOC entry 3566 (class 1259 OID 16491)
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- TOC entry 3557 (class 1259 OID 16474)
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- TOC entry 3558 (class 1259 OID 16475)
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- TOC entry 3561 (class 1259 OID 16476)
-- Name: refresh_tokens_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_token_idx ON auth.refresh_tokens USING btree (token);


--
-- TOC entry 3553 (class 1259 OID 16463)
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, email);


--
-- TOC entry 3554 (class 1259 OID 16464)
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- TOC entry 3569 (class 1259 OID 16519)
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- TOC entry 3572 (class 1259 OID 16541)
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- TOC entry 3573 (class 1259 OID 16542)
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- TOC entry 3639 (class 2620 OID 17167)
-- Name: users on_auth_user_created; Type: TRIGGER; Schema: auth; Owner: supabase_auth_admin
--

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


--
-- TOC entry 3640 (class 2620 OID 17150)
-- Name: album check_album; Type: TRIGGER; Schema: iris; Owner: postgres
--

CREATE TRIGGER check_album BEFORE INSERT ON iris.album FOR EACH ROW EXECUTE FUNCTION public.check_album();


--
-- TOC entry 3641 (class 2620 OID 17148)
-- Name: album delete_album_track; Type: TRIGGER; Schema: iris; Owner: postgres
--

CREATE TRIGGER delete_album_track AFTER DELETE ON iris.album FOR EACH ROW EXECUTE FUNCTION public.delete_album_track();


--
-- TOC entry 3630 (class 2606 OID 17057)
-- Name: album album_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.album
    ADD CONSTRAINT album_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3628 (class 2606 OID 17029)
-- Name: alternative_name alternative_name_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.alternative_name
    ADD CONSTRAINT alternative_name_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3627 (class 2606 OID 17015)
-- Name: extra_content extra_content_extra_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.extra_content
    ADD CONSTRAINT extra_content_extra_id_fkey FOREIGN KEY (extra_id) REFERENCES iris.game(id);


--
-- TOC entry 3626 (class 2606 OID 17010)
-- Name: extra_content extra_content_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.extra_content
    ADD CONSTRAINT extra_content_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3625 (class 2606 OID 16998)
-- Name: game game_category_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.game
    ADD CONSTRAINT game_category_fkey FOREIGN KEY (category) REFERENCES iris.category(id);


--
-- TOC entry 3624 (class 2606 OID 16993)
-- Name: game game_collection_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.game
    ADD CONSTRAINT game_collection_id_fkey FOREIGN KEY (collection_id) REFERENCES iris.collection(id);


--
-- TOC entry 3623 (class 2606 OID 16988)
-- Name: game game_parent_game_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.game
    ADD CONSTRAINT game_parent_game_fkey FOREIGN KEY (parent_game) REFERENCES iris.game(id);


--
-- TOC entry 3633 (class 2606 OID 17096)
-- Name: genre genre_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.genre
    ADD CONSTRAINT genre_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3635 (class 2606 OID 17118)
-- Name: involved_companies involved_companies_company_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.involved_companies
    ADD CONSTRAINT involved_companies_company_id_fkey FOREIGN KEY (company_id) REFERENCES iris.company(id);


--
-- TOC entry 3634 (class 2606 OID 17113)
-- Name: involved_companies involved_companies_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.involved_companies
    ADD CONSTRAINT involved_companies_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3636 (class 2606 OID 17132)
-- Name: keyword keyword_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.keyword
    ADD CONSTRAINT keyword_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3632 (class 2606 OID 17086)
-- Name: media media_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.media
    ADD CONSTRAINT media_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3631 (class 2606 OID 17076)
-- Name: playlist playlist_track_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.playlist
    ADD CONSTRAINT playlist_track_id_fkey FOREIGN KEY (track_id) REFERENCES iris.track(id);


--
-- TOC entry 3637 (class 2606 OID 17142)
-- Name: theme theme_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.theme
    ADD CONSTRAINT theme_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3629 (class 2606 OID 17043)
-- Name: track track_game_id_fkey; Type: FK CONSTRAINT; Schema: iris; Owner: postgres
--

ALTER TABLE ONLY iris.track
    ADD CONSTRAINT track_game_id_fkey FOREIGN KEY (game_id) REFERENCES iris.game(id);


--
-- TOC entry 3638 (class 2606 OID 17158)
-- Name: profiles profiles_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id);


--
-- TOC entry 3620 (class 2606 OID 16514)
-- Name: buckets buckets_owner_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_owner_fkey FOREIGN KEY (owner) REFERENCES auth.users(id);


--
-- TOC entry 3621 (class 2606 OID 16531)
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 3622 (class 2606 OID 16536)
-- Name: objects objects_owner_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_owner_fkey FOREIGN KEY (owner) REFERENCES auth.users(id);


--
-- TOC entry 3790 (class 3256 OID 17163)
-- Name: profiles Profiles are viewable by users who created them.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Profiles are viewable by users who created them." ON public.profiles FOR SELECT USING ((auth.uid() = id));


--
-- TOC entry 3791 (class 3256 OID 17164)
-- Name: profiles Users can insert their own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK ((auth.uid() = id));


--
-- TOC entry 3792 (class 3256 OID 17165)
-- Name: profiles Users can update own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update own profile." ON public.profiles FOR UPDATE USING ((auth.uid() = id));


--
-- TOC entry 3789 (class 0 OID 17151)
-- Dependencies: 266
-- Name: profiles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 3788 (class 0 OID 16520)
-- Dependencies: 227
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 3793 (class 6104 OID 16385)
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- TOC entry 3833 (class 0 OID 0)
-- Dependencies: 10
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;


--
-- TOC entry 3834 (class 0 OID 0)
-- Dependencies: 11
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- TOC entry 3835 (class 0 OID 0)
-- Dependencies: 7
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- TOC entry 3837 (class 0 OID 0)
-- Dependencies: 16
-- Name: SCHEMA graphql_public; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA graphql_public TO anon;
GRANT USAGE ON SCHEMA graphql_public TO authenticated;
GRANT USAGE ON SCHEMA graphql_public TO service_role;


--
-- TOC entry 3838 (class 0 OID 0)
-- Dependencies: 9
-- Name: SCHEMA iris; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA iris TO postgres;


--
-- TOC entry 3839 (class 0 OID 0)
-- Dependencies: 14
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- TOC entry 3843 (class 0 OID 0)
-- Dependencies: 288
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: postgres
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- TOC entry 3844 (class 0 OID 0)
-- Dependencies: 289
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: postgres
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- TOC entry 3845 (class 0 OID 0)
-- Dependencies: 290
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: postgres
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- TOC entry 3846 (class 0 OID 0)
-- Dependencies: 418
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- TOC entry 3847 (class 0 OID 0)
-- Dependencies: 419
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- TOC entry 3848 (class 0 OID 0)
-- Dependencies: 420
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- TOC entry 3849 (class 0 OID 0)
-- Dependencies: 291
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- TOC entry 3850 (class 0 OID 0)
-- Dependencies: 421
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- TOC entry 3851 (class 0 OID 0)
-- Dependencies: 292
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3852 (class 0 OID 0)
-- Dependencies: 293
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3853 (class 0 OID 0)
-- Dependencies: 422
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- TOC entry 3854 (class 0 OID 0)
-- Dependencies: 294
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- TOC entry 3855 (class 0 OID 0)
-- Dependencies: 295
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3856 (class 0 OID 0)
-- Dependencies: 296
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3857 (class 0 OID 0)
-- Dependencies: 268
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- TOC entry 3858 (class 0 OID 0)
-- Dependencies: 423
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- TOC entry 3859 (class 0 OID 0)
-- Dependencies: 297
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- TOC entry 3860 (class 0 OID 0)
-- Dependencies: 298
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- TOC entry 3862 (class 0 OID 0)
-- Dependencies: 329
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- TOC entry 3864 (class 0 OID 0)
-- Dependencies: 299
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3865 (class 0 OID 0)
-- Dependencies: 300
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- TOC entry 3867 (class 0 OID 0)
-- Dependencies: 312
-- Name: FUNCTION notify_api_restart(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.notify_api_restart() TO dashboard_user;


--
-- TOC entry 3868 (class 0 OID 0)
-- Dependencies: 313
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- TOC entry 3869 (class 0 OID 0)
-- Dependencies: 314
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- TOC entry 3870 (class 0 OID 0)
-- Dependencies: 315
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- TOC entry 3871 (class 0 OID 0)
-- Dependencies: 424
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3872 (class 0 OID 0)
-- Dependencies: 425
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- TOC entry 3873 (class 0 OID 0)
-- Dependencies: 426
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- TOC entry 3874 (class 0 OID 0)
-- Dependencies: 316
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3875 (class 0 OID 0)
-- Dependencies: 317
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- TOC entry 3876 (class 0 OID 0)
-- Dependencies: 318
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- TOC entry 3877 (class 0 OID 0)
-- Dependencies: 319
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- TOC entry 3878 (class 0 OID 0)
-- Dependencies: 320
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- TOC entry 3879 (class 0 OID 0)
-- Dependencies: 321
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 3880 (class 0 OID 0)
-- Dependencies: 280
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- TOC entry 3881 (class 0 OID 0)
-- Dependencies: 281
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- TOC entry 3882 (class 0 OID 0)
-- Dependencies: 282
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- TOC entry 3883 (class 0 OID 0)
-- Dependencies: 322
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- TOC entry 3884 (class 0 OID 0)
-- Dependencies: 283
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- TOC entry 3885 (class 0 OID 0)
-- Dependencies: 427
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- TOC entry 3886 (class 0 OID 0)
-- Dependencies: 284
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- TOC entry 3887 (class 0 OID 0)
-- Dependencies: 285
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- TOC entry 3889 (class 0 OID 0)
-- Dependencies: 323
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- TOC entry 3890 (class 0 OID 0)
-- Dependencies: 324
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- TOC entry 3891 (class 0 OID 0)
-- Dependencies: 325
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- TOC entry 3892 (class 0 OID 0)
-- Dependencies: 428
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- TOC entry 3893 (class 0 OID 0)
-- Dependencies: 301
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- TOC entry 3894 (class 0 OID 0)
-- Dependencies: 302
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- TOC entry 3895 (class 0 OID 0)
-- Dependencies: 303
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- TOC entry 3896 (class 0 OID 0)
-- Dependencies: 304
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- TOC entry 3897 (class 0 OID 0)
-- Dependencies: 305
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- TOC entry 3898 (class 0 OID 0)
-- Dependencies: 306
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- TOC entry 3899 (class 0 OID 0)
-- Dependencies: 429
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- TOC entry 3900 (class 0 OID 0)
-- Dependencies: 307
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- TOC entry 3901 (class 0 OID 0)
-- Dependencies: 308
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- TOC entry 3902 (class 0 OID 0)
-- Dependencies: 309
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- TOC entry 3903 (class 0 OID 0)
-- Dependencies: 330
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- TOC entry 3904 (class 0 OID 0)
-- Dependencies: 432
-- Name: FUNCTION rebuild_on_ddl(); Type: ACL; Schema: graphql; Owner: postgres
--

GRANT ALL ON FUNCTION graphql.rebuild_on_ddl() TO anon;
GRANT ALL ON FUNCTION graphql.rebuild_on_ddl() TO authenticated;
GRANT ALL ON FUNCTION graphql.rebuild_on_ddl() TO service_role;


--
-- TOC entry 3905 (class 0 OID 0)
-- Dependencies: 433
-- Name: FUNCTION rebuild_on_drop(); Type: ACL; Schema: graphql; Owner: postgres
--

GRANT ALL ON FUNCTION graphql.rebuild_on_drop() TO anon;
GRANT ALL ON FUNCTION graphql.rebuild_on_drop() TO authenticated;
GRANT ALL ON FUNCTION graphql.rebuild_on_drop() TO service_role;


--
-- TOC entry 3906 (class 0 OID 0)
-- Dependencies: 434
-- Name: FUNCTION rebuild_schema(); Type: ACL; Schema: graphql; Owner: postgres
--

GRANT ALL ON FUNCTION graphql.rebuild_schema() TO anon;
GRANT ALL ON FUNCTION graphql.rebuild_schema() TO authenticated;
GRANT ALL ON FUNCTION graphql.rebuild_schema() TO service_role;


--
-- TOC entry 3907 (class 0 OID 0)
-- Dependencies: 436
-- Name: FUNCTION variable_definitions_sort(variable_definitions jsonb); Type: ACL; Schema: graphql; Owner: postgres
--

GRANT ALL ON FUNCTION graphql.variable_definitions_sort(variable_definitions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql.variable_definitions_sort(variable_definitions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql.variable_definitions_sort(variable_definitions jsonb) TO service_role;


--
-- TOC entry 3908 (class 0 OID 0)
-- Dependencies: 417
-- Name: FUNCTION check_album(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.check_album() TO anon;
GRANT ALL ON FUNCTION public.check_album() TO authenticated;
GRANT ALL ON FUNCTION public.check_album() TO service_role;


--
-- TOC entry 3909 (class 0 OID 0)
-- Dependencies: 431
-- Name: FUNCTION delete_album_track(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_album_track() TO anon;
GRANT ALL ON FUNCTION public.delete_album_track() TO authenticated;
GRANT ALL ON FUNCTION public.delete_album_track() TO service_role;


--
-- TOC entry 3910 (class 0 OID 0)
-- Dependencies: 430
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_new_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_user() TO service_role;


--
-- TOC entry 3911 (class 0 OID 0)
-- Dependencies: 435
-- Name: FUNCTION extension(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.extension(name text) TO anon;
GRANT ALL ON FUNCTION storage.extension(name text) TO authenticated;
GRANT ALL ON FUNCTION storage.extension(name text) TO service_role;
GRANT ALL ON FUNCTION storage.extension(name text) TO dashboard_user;


--
-- TOC entry 3912 (class 0 OID 0)
-- Dependencies: 437
-- Name: FUNCTION filename(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.filename(name text) TO anon;
GRANT ALL ON FUNCTION storage.filename(name text) TO authenticated;
GRANT ALL ON FUNCTION storage.filename(name text) TO service_role;
GRANT ALL ON FUNCTION storage.filename(name text) TO dashboard_user;


--
-- TOC entry 3913 (class 0 OID 0)
-- Dependencies: 286
-- Name: FUNCTION foldername(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.foldername(name text) TO anon;
GRANT ALL ON FUNCTION storage.foldername(name text) TO authenticated;
GRANT ALL ON FUNCTION storage.foldername(name text) TO service_role;
GRANT ALL ON FUNCTION storage.foldername(name text) TO dashboard_user;


--
-- TOC entry 3914 (class 0 OID 0)
-- Dependencies: 287
-- Name: FUNCTION search(prefix text, bucketname text, limits integer, levels integer, offsets integer); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer) TO anon;
GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer) TO authenticated;
GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer) TO service_role;
GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer) TO dashboard_user;


--
-- TOC entry 3916 (class 0 OID 0)
-- Dependencies: 224
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;


--
-- TOC entry 3918 (class 0 OID 0)
-- Dependencies: 223
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;


--
-- TOC entry 3920 (class 0 OID 0)
-- Dependencies: 222
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;


--
-- TOC entry 3922 (class 0 OID 0)
-- Dependencies: 221
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;


--
-- TOC entry 3924 (class 0 OID 0)
-- Dependencies: 225
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;


--
-- TOC entry 3926 (class 0 OID 0)
-- Dependencies: 220
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;


--
-- TOC entry 3936 (class 0 OID 0)
-- Dependencies: 266
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.profiles TO anon;
GRANT ALL ON TABLE public.profiles TO authenticated;
GRANT ALL ON TABLE public.profiles TO service_role;


--
-- TOC entry 3937 (class 0 OID 0)
-- Dependencies: 226
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;


--
-- TOC entry 3938 (class 0 OID 0)
-- Dependencies: 228
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;


--
-- TOC entry 3939 (class 0 OID 0)
-- Dependencies: 227
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;


--
-- TOC entry 2363 (class 826 OID 16932)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- TOC entry 2365 (class 826 OID 16931)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- TOC entry 2366 (class 826 OID 16930)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- TOC entry 2368 (class 826 OID 16565)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- TOC entry 2370 (class 826 OID 16566)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- TOC entry 2372 (class 826 OID 16564)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- TOC entry 2373 (class 826 OID 16568)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- TOC entry 2375 (class 826 OID 16563)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- TOC entry 2377 (class 826 OID 16567)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- TOC entry 2378 (class 826 OID 16449)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- TOC entry 2379 (class 826 OID 16450)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- TOC entry 2362 (class 826 OID 16448)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- TOC entry 2364 (class 826 OID 16452)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- TOC entry 2367 (class 826 OID 16447)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- TOC entry 2369 (class 826 OID 16451)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- TOC entry 2371 (class 826 OID 16504)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- TOC entry 2374 (class 826 OID 16503)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- TOC entry 2376 (class 826 OID 16502)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- TOC entry 3522 (class 3466 OID 16557)
-- Name: api_restart; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER api_restart ON ddl_command_end
   EXECUTE FUNCTION extensions.notify_api_restart();


ALTER EVENT TRIGGER api_restart OWNER TO postgres;

--
-- TOC entry 3525 (class 3466 OID 16572)
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO postgres;

--
-- TOC entry 3523 (class 3466 OID 16559)
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE SCHEMA')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO postgres;

--
-- TOC entry 3524 (class 3466 OID 16570)
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO postgres;

-- Completed on 2023-03-25 18:47:27 UTC

--
-- PostgreSQL database dump complete
--

